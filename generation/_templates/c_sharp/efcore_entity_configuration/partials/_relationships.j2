		{%- for relationship in table | return_relationships_with_valid_columns(tables) %}
		{%- set ref_table_name = relationship.referenced_table_name | convert_to_case(domain.namingConvention) %}
		{%- set parent_table_name = table.table_name | convert_to_case(domain.namingConvention) %}
		{%- set parent_relationship = table | return_parent_relationships(tables,relationship) %}
		{%- if parent_relationship is not none %}
		{%- set parent_table_name = parent_relationship.referenced_table_name | convert_to_case(domain.namingConvention)%}
		{%- endif %}
		        {%- if relationship.referenced_multiplicity == "Many"%}
			builder.HasMany<{{ relationship.referenced_table_name | convert_to_case(domain.namingConvention) }}>(s => s.{{ref_table_name}}s)
			{%- else %}
			builder.HasOne<{{ relationship.referenced_table_name | convert_to_case(domain.namingConvention) }}>(s => s.{{ref_table_name}}) // 1
			{%- endif %}
			{%- if relationship.multiplicity == "Many"%}
			      .WithMany(s => s.{{parent_table_name}}s)
			      .HasForeignKey(s => s.{{relationship.column_name}})
			      .OnDelete(DeleteBehavior.Restrict);
			{%- elif relationship.multiplicity == "One"%}
			      .WithOne(t => t.{{parent_table_name}}) // 2
			      .HasForeignKey("{{relationship.relationship_name}}")
			      .OnDelete(DeleteBehavior.Restrict);
			{%- else %}
			{%- if relationship.referenced_multiplicity == "Many"%}
			      .WithOne(u => u.{{parent_table_name}}) // 3
			      .HasForeignKey("{{relationship.relationship_name}}")
			      .OnDelete(DeleteBehavior.Restrict);
			{%- else %}
			      .WithOne(v => v.{{parent_table_name}}) // 4
			      .OnDelete(DeleteBehavior.Restrict);
			{%- endif %}
			{%- endif %}
		{%- endfor %}